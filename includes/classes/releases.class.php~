<?php
//======================================================================//
//== About releases.class.php
//==--------------------------------------------------------------------//
//== This file is generated by mysql.class.php of puppets library.
//== Copyright (c) 2009-2011 - MAQPRINT
//== Licensed under the GPL version 2.0 license.
//== See LICENSE file or
//== http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
//==--------------------------------------------------------------------//
//== Contributor : Erwan LE LOSTEC
//== Contributor : Patrick PERONNY
//======================================================================//
class releases
{/** @class releases
  * @brief releases table management.
  * Provides different methods for read and write in a releases table.
  **/
	public $rel_id;
	public $rel_number;
	public $rel_title;
	public $rel_date;
	public $rel_tracklist;
	public $rel_description_fr;
	public $rel_description_en;
	public $rel_download;
	public $rel_paypal;
	public $rel_show;
	public $sublab_id;
	public $art_ids;
	public $pho_ids;

	private $mysql;

	public function __construct($rel_id = null)
	{/** @function releases()
	  * Create a new releases object.
	  *
	  * @param	rel_id		<int(11)>	the id of releases to load
	  *
	  * @return	<boolean>
	  **/
		global $mysql;

		$this->mysql	= $mysql;

		$this->rel_id	= $this->mysql->secure($rel_id);
		$this->rel_number	= null;
		$this->rel_title	= null;
		$this->rel_date	= null;
		$this->rel_tracklist	= null;
		$this->rel_description_fr	= null;
		$this->rel_description_en	= null;
		$this->rel_download	= null;
		$this->rel_paypal	= null;
		$this->rel_show	= null;
		$this->sublab_id	= null;
		$this->art_ids	= array();
		$this->pho_ids	= array();

		if($rel_id != null)
		{
			$req_releases = $this->mysql->query("SELECT * FROM releases WHERE rel_id='".$this->rel_id."' LIMIT 1;");
			if($req_releases->numRows() > 0)
			{
				$obj_releases = $req_releases->fetchRow();
				$this->rel_id	= $obj_releases->rel_id;
				$this->rel_number	= $obj_releases->rel_number;
				$this->rel_title	= $obj_releases->rel_title;
				$this->rel_date	= $obj_releases->rel_date;
				$this->rel_tracklist	= $obj_releases->rel_tracklist;
				$this->rel_description_fr	= $obj_releases->rel_description_fr;
				$this->rel_description_en	= $obj_releases->rel_description_en;
				$this->rel_download	= $obj_releases->rel_download;
				$this->rel_paypal	= $obj_releases->rel_paypal;
				$this->rel_show	= $obj_releases->rel_show;
				$this->sublab_id	= $obj_releases->sublab_id;
				$this->art_ids = $this->getArtistes();
				$this->pho_ids = $this->getPhotos();
			}
			else
			{
				error_log("Error while loading releases, there no releases of id : $rel_id.");
				throw new Exception("Error while loading releases, there no releases of id : $rel_id.");
				return false;
			};
		}
		return true;
	}
	public function save()
	{/** @function save()
	 * Insert or update a releases.
	 *
	 * @return	<mixed>		return false or the id of inserted/updated releases.
	 **/
		$flag_error = false;

		$this->mysql->beginTransactions();

		if(empty($this->rel_id))
		{//-- Insert
			echo "INSERT INTO releases (rel_number, rel_title, rel_date, rel_tracklist, rel_description_fr, rel_description_en, rel_download, rel_paypal, rel_show, sublab_id)
									VALUES ('".$this->mysql->secure($this->rel_number)."', '".$this->mysql->secure($this->rel_title)."', '".$this->mysql->secure($this->rel_date)."', '".$this->mysql->secure($this->rel_tracklist)."', '".$this->mysql->secure($this->rel_description_fr)."', '".$this->mysql->secure($this->rel_description_en)."', '".$this->mysql->secure($this->rel_download)."', '".$this->mysql->secure($this->rel_paypal)."', '".$this->mysql->secure($this->rel_show)."', NULL);";
			if(!$this->mysql->query("INSERT INTO releases (rel_number, rel_title, rel_date, rel_tracklist, rel_description_fr, rel_description_en, rel_download, rel_paypal, rel_show, sublab_id)
									VALUES ('".$this->mysql->secure($this->rel_number)."', '".$this->mysql->secure($this->rel_title)."', '".$this->mysql->secure($this->rel_date)."', '".$this->mysql->secure($this->rel_tracklist)."', '".$this->mysql->secure($this->rel_description_fr)."', '".$this->mysql->secure($this->rel_description_en)."', '".$this->mysql->secure($this->rel_download)."', '".$this->mysql->secure($this->rel_paypal)."', '".$this->mysql->secure($this->rel_show)."', NULL);")) { $flag_error = true; };
			$this->rel_id = $this->mysql->lastInsertId();
		}
		else
		{//-- Update
			if(!$this->mysql->query("UPDATE releases SET rel_number='".$this->mysql->secure($this->rel_number)."', rel_title='".$this->mysql->secure($this->rel_title)."', rel_date='".$this->mysql->secure($this->rel_date)."', rel_tracklist='".$this->mysql->secure($this->rel_tracklist)."', rel_description_fr='".$this->mysql->secure($this->rel_description_fr)."', rel_description_en='".$this->mysql->secure($this->rel_description_en)."', rel_download='".$this->mysql->secure($this->rel_download)."', rel_paypal='".$this->mysql->secure($this->rel_paypal)."', rel_show='".$this->mysql->secure($this->rel_show)."', sublab_id='".$this->mysql->secure($this->sublab_id)."'
									WHERE rel_id=".$this->mysql->secure($this->rel_id).";")) { $flag_error = true; };
		}

		$this->mysql->endTransactions($flag_error);

		if($flag_error)
		{
			error_log("Error while inserting/updating the releases.");
			throw new Exception("Error while inserting/updating the releases.");
			return false;
		}
		else
		{
			return $this->rel_id;
		};
	}
	public static function delete($rel_id)
	{/** @function delete()
	 * Delete the releases.
	 *
	 * @param	rel_id	<int(11)>	the id of the releases to delete
	 *
	 * @return	<boolean>
	 **/
		global $mysql;

		$flag_error = false;

		$mysql->beginTransactions();

		if(!$mysql->query("DELETE FROM releases WHERE rel_id=".$mysql->secure($rel_id).";")) { $flag_error = true; };

		$mysql->endTransactions($flag_error);

		if($flag_error)
		{
			error_log("Error while deleting the releases. - DELETE FROM releases WHERE rel_id=".$mysql->secure($rel_id));
			throw new Exception("Error while deleting the releases.");
			return false;
		}
		else
		{
			return true;
		};
	}

	public static function getAll($online=true)
	{
		global $mysql;
		$rels = array();
		if ($online === true)
		{
			$req_all = $mysql->query("SELECT rel_id FROM releases WHERE rel_show='1' ORDER BY rel_date DESC");
		} else
		{
			$req_all = $mysql->query("SELECT rel_id FROM releases ORDER BY rel_date DESC");
		}

		while($obj_all = $req_all->fetchRow())
		{
			$rels[] = $obj_all->rel_id;
		}
		return $rels;
	}

	private function getArtistes()
	{
		$arts = array();
		$req_art = $this->mysql->query("SELECT art_id FROM art_has_rel WHERE rel_id='".$this->rel_id."'");
		while($obj_art = $req_art->fetchRow())
		{
			$arts[] = $obj_art->art_id;
		}
		$this->art_ids = $arts;
		return $arts;
	}

	private function getPhotos()
	{
		$phos = array();
		$req_pho = $this->mysql->query("SELECT * FROM rel_has_pho WHERE rel_id='".$this->rel_id."' ");
		while($obj_pho = $req_pho->fetchRow())
		{
			$phos[] = $obj_pho->pho_id;
		}
		return $phos;
	}
}
?>