<?php
//======================================================================//
//== About news.class.php
//==--------------------------------------------------------------------//
//== This file is generated by mysql.class.php of puppets library.
//== Copyright (c) 2009-2011 - MAQPRINT
//== Licensed under the GPL version 2.0 license.
//== See LICENSE file or
//== http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
//==--------------------------------------------------------------------//
//== Contributor : Erwan LE LOSTEC
//== Contributor : Patrick PERONNY
//======================================================================//
class news
{/** @class news
  * @brief news table management.
  * Provides different methods for read and write in a news table.
  **/
	public $new_id;
	public $new_date;
	public $new_title;
	public $new_content_fr;
	public $new_content_en;
	public $new_show;
	public $pho_ids;

	private $mysql;

	public function __construct($new_id = null)
	{/** @function news()
	  * Create a new news object.
	  *
	  * @param	new_id		<int(11)>	the id of news to load
	  *
	  * @return	<boolean>
	  **/
		global $mysql;

		$this->mysql	= $mysql;

		$this->new_id	= $this->mysql->secure($new_id);
		$this->new_date	= null;
		$this->new_title	= null;
		$this->new_content_fr	= null;
		$this->new_content_en	= null;
		$this->new_show	= null;
		$this->pho_ids	= array();
		if($new_id != null)
		{
			$req_news = $this->mysql->query("SELECT * FROM news WHERE new_id='".$this->new_id."' LIMIT 1;");
			if($req_news->numRows() > 0)
			{
				$obj_news = $req_news->fetchRow();
				$this->new_id	= $obj_news->new_id;
				$this->new_date	= $obj_news->new_date;
				$this->new_title	= $obj_news->new_title;
				$this->new_content_fr	= $obj_news->new_content_fr;
				$this->new_content_en	= $obj_news->new_content_en;
				$this->new_show	= $obj_news->new_show;
				$this->pho_ids = $this->getPhotos();
			}
			else
			{
				error_log("Error while loading news, there no news of id : $new_id.");
				throw new Exception("Error while loading news, there no news of id : $new_id.");
				return false;
			};
		}
		return true;
	}
	public function save()
	{/** @function save()
	 * Insert or update a news.
	 *
	 * @return	<mixed>		return false or the id of inserted/updated news.
	 **/
		$flag_error = false;

		$this->mysql->beginTransactions();

		if(empty($this->new_id))
		{//-- Insert
			if(!$this->mysql->query("INSERT INTO news (new_date, new_title, new_content_fr, new_content_en, new_show)
									VALUES ('".$this->mysql->secure($this->new_date)."', '".$this->mysql->secure($this->new_title)."', '".$this->mysql->secure($this->new_content_fr)."', '".$this->mysql->secure($this->new_content_en)."', ".$this->mysql->secure($this->new_show).");")) { $flag_error = true; };
			$this->new_id = $this->mysql->lastInsertId();
		}
		else
		{//-- Update
			if(!$this->mysql->query("UPDATE news SET new_date='".$this->mysql->secure($this->new_date)."', new_title='".$this->mysql->secure($this->new_title)."', new_content_fr=\"".$this->mysql->secure($this->new_content_fr)."\", new_content_en=\"".$this->mysql->secure($this->new_content_en)."\", new_show=".$this->mysql->secure($this->new_show)."
									WHERE new_id='".$this->mysql->secure($this->new_id)."';")) { $flag_error = true; };
		}

		$this->mysql->endTransactions($flag_error);

		if($flag_error)
		{
			error_log("Error while inserting/updating the news.");
			throw new Exception("Error while inserting/updating the news.");
			return false;
		}
		else
		{
			return $this->new_id;
		};
	}
	public static function delete($new_id)
	{/** @function delete()
	 * Delete the news.
	 *
	 * @param	new_id	<int(11)>	the id of the news to delete
	 *
	 * @return	<boolean>
	 **/
		global $mysql;

		$flag_error = false;

		$mysql->beginTransactions();

		if(!$mysql->query("DELETE FROM news WHERE new_id=".$mysql->secure($new_id).";")) { $flag_error = true; };

		$mysql->endTransactions($flag_error);

		if($flag_error)
		{
			error_log("Error while deleting the news. - DELETE FROM news WHERE new_id=".$mysql->secure($new_id));
			throw new Exception("Error while deleting the news.");
			return false;
		}
		else
		{
			return true;
		};
	}

	public static function getAll($online=true)
	{
		global $mysql;
		if ($online === true)
		{
			$req_all = $mysql->query("SELECT * FROM news WHERE new_show='1' ORDER BY new_date DESC");
		} else
		{
			$req_all = $mysql->query("SELECT * FROM news ORDER BY new_date DESC");
		}

		$new_ids = array();
		while ($obj_all = $req_all->fetchRow())
		{
			$new_ids[] = $obj_all->new_id;
		}
		return $new_ids;
	}

// 	public function getPhotos($newpho_type='main')
// 	{
// 		$req_pho = $this->mysql->query("SELECT * FROM new_has_pho WHERE new_id='".$this->new_id."' and newpho_type='".$this->mysql->secure($newpho_type)."' ORDER BY newpho_order ASC");
// 		$phos = array();
// 		while($obj_pho = $req_pho->fetchRow())
// 		{
// 			$phos[] = $obj_pho->pho_id;
// 		}
// 		return $phos;
// 	}

	private function getPhotos()
	{
		$phos = array();
		$req_pho = $this->mysql->query("SELECT * FROM new_has_pho WHERE new_id='".$this->new_id."' ORDER BY newpho_order ASC");
		while($obj_pho = $req_pho->fetchRow())
		{
			$phos[] = $obj_pho->pho_id;
		}
		return $phos;
	}

	public function addPhoto($pho_id)
	{
		$this->removePhoto($pho_id);
		$new_has_pho = new new_has_pho();
		$new_has_pho->new_id = $this->new_id;
		$new_has_pho->pho_id = $pho_id;
		$new_has_pho->newpho_order = new_has_pho::getLastOrder($this->new_id)+1;
		$new_has_pho->save();
		return $new_has_pho-newpho_id;
	}

	public function removePhoto($pho_id)
	{
		$newpho_id = new_has_pho::exists(null, $this->new_id, $pho_id);
		if ($newpho_id !== false)
		{
			new_has_pho::delete($newpho_id);
		}
	}
}
?>