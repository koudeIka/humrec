<?php
//======================================================================//
//== About releases.class.php
//==--------------------------------------------------------------------//
//== This file is generated by mysql.class.php of puppets library.
//== Copyright (c) 2009-2011 - MAQPRINT
//== Licensed under the GPL version 2.0 license.
//== See LICENSE file or
//== http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
//==--------------------------------------------------------------------//
//== Contributor : Erwan LE LOSTEC
//== Contributor : Patrick PERONNY
//======================================================================//
class releases
{/** @class releases
  * @brief releases table management.
  * Provides different methods for read and write in a releases table.
  **/
	public $rel_id;
	public $rel_number;
	public $rel_title;
	public $rel_url;
	public $rel_date;
	public $rel_tracklist;
	public $rel_content_fr;
	public $rel_content_en;
	public $rel_download;
	public $rel_paypal_id;
	public $rel_paypal_priceue;
	public $rel_paypal_priceworld;
	public $rel_paypal_currency_code;
	public $rel_paypal_encrypted;
	public $rel_stream;
	public $rel_show;
	public $sublab_id;
	public $art_ids;
	public $pho_ids;
	public $tracks;

	private $mysql;

	public function __construct($rel_id = null)
	{/** @function releases()
	  * Create a new releases object.
	  *
	  * @param	rel_id		<int(11)>	the id of releases to load
	  *
	  * @return	<boolean>
	  **/
		global $mysql;

		$this->mysql	= $mysql;

		$this->rel_id	= $this->mysql->secure($rel_id);
		$this->rel_number	= null;
		$this->rel_title	= null;
		$this->rel_url		= null;
		$this->rel_date	= null;
		$this->rel_tracklist	= null;
		$this->rel_content_fr	= null;
		$this->rel_content_en	= null;
		$this->rel_download	= null;
		$this->rel_paypal_id	= null;
		$this->rel_paypal_priceue	= null;
		$this->rel_paypal_priceworld	= null;
		$this->rel_paypal_currency_code	= "EUR";
		$this->rel_paypal_encrypted	= null;
		$this->rel_stream	= null;
		$this->rel_show	= 0;
		$this->sublab_id	= null;
		$this->art_ids = array();
		$this->pho_ids = array();
		$this->tracks = array();
		if($rel_id != null)
		{
			$req_releases = $this->mysql->query("SELECT * FROM releases WHERE rel_id='".$this->rel_id."' LIMIT 1;");
			if($req_releases->numRows() > 0)
			{
				$obj_releases = $req_releases->fetchRow();
				$this->rel_id	= $obj_releases->rel_id;
				$this->rel_number	= $obj_releases->rel_number;
				$this->rel_title	= $obj_releases->rel_title;
				$this->rel_url	= $obj_releases->rel_url;
				$this->rel_date	= $obj_releases->rel_date;
				$this->rel_tracklist	= $obj_releases->rel_tracklist;
				$this->rel_content_fr	= $obj_releases->rel_content_fr;
				$this->rel_content_en	= $obj_releases->rel_content_en;
				$this->rel_download	= $obj_releases->rel_download;
				$this->rel_paypal_id	= $obj_releases->rel_paypal_id;
				$this->rel_paypal_priceue	= $obj_releases->rel_paypal_priceue;
				$this->rel_paypal_priceworld	= $obj_releases->rel_paypal_priceworld;
				$this->rel_paypal_currency_code	= $obj_releases->rel_paypal_currency_code;
				$this->rel_paypal_encrypted	= $obj_releases->rel_paypal_encrypted;
				$this->rel_stream	= $obj_releases->rel_stream;
				$this->rel_show	= $obj_releases->rel_show;
				$this->sublab_id	= $obj_releases->sublab_id;
				$this->getArtistes();
				$this->pho_ids = $this->getPhotos();
				
				$this->tracks = $this->getTracklist();
			}
			else
			{
				error_log("Error while loading releases, there no releases of id : $rel_id.");
				throw new Exception("Error while loading releases, there no releases of id : $rel_id.");
				return false;
			};
		}
		return true;
	}
	public function save()
	{/** @function save()
	 * Insert or update a releases.
	 *
	 * @return	<mixed>		return false or the id of inserted/updated releases.
	 **/
		$flag_error = false;

		$this->mysql->beginTransactions();

		if(empty($this->rel_id))
		{//-- Insert
			if(!$this->mysql->query("INSERT INTO releases (rel_number, rel_title, rel_date, rel_tracklist, rel_content_fr, rel_content_en, rel_download, rel_paypal_id, rel_paypal_priceue, rel_paypal_priceworld, rel_paypal_currency_code, rel_paypal_encrypted, rel_stream, rel_show, rel_url, sublab_id)
									VALUES ('".$this->mysql->secure($this->rel_number)."', '".$this->mysql->secure($this->rel_title)."', '".$this->mysql->secure($this->rel_date)."', '".$this->mysql->secure($this->rel_tracklist)."', \"".$this->mysql->secure($this->rel_content_fr)."\", \"".$this->mysql->secure($this->rel_content_en)."\", '".$this->mysql->secure($this->rel_download)."', '".$this->mysql->secure($this->rel_paypal_id)."', '".$this->mysql->secure($this->rel_paypal_priceue)."', '".$this->mysql->secure($this->rel_paypal_priceworld)."', '".$this->mysql->secure($this->rel_paypal_currency_code)."', \"".$this->mysql->secure($this->rel_paypal_encrypted)."\", \"".$this->mysql->secure($this->rel_stream)."\", ".$this->mysql->secure($this->rel_show).", \"".$this->mysql->secure($this->rel_url)."\", ".$this->mysql->secure($this->sublab_id).");")) { $flag_error = true; };
			$this->rel_id = $this->mysql->lastInsertId();
		}
		else
		{//-- Update
			if(!$this->mysql->query("UPDATE releases 
			      SET rel_number='".$this->mysql->secure($this->rel_number)."', rel_title='".$this->mysql->secure($this->rel_title)."', rel_date='".$this->mysql->secure($this->rel_date)."', rel_tracklist='".$this->mysql->secure($this->rel_tracklist)."', rel_content_fr=\"".$this->mysql->secure($this->rel_content_fr)."\", rel_content_en=\"".$this->mysql->secure($this->rel_content_en)."\", rel_download='".$this->mysql->secure($this->rel_download)."', rel_paypal_id='".$this->mysql->secure($this->rel_paypal_id)."', rel_paypal_priceue='".$this->mysql->secure($this->rel_paypal_priceue)."', rel_paypal_priceworld='".$this->mysql->secure($this->rel_paypal_priceworld)."', rel_paypal_currency_code='".$this->mysql->secure($this->rel_paypal_currency_code)."', rel_paypal_encrypted=\"".$this->mysql->secure($this->rel_paypal_encrypted)."\", rel_stream='".$this->mysql->secure($this->rel_stream)."', rel_show='".$this->mysql->secure($this->rel_show)."', rel_url=\"".$this->mysql->secure($this->rel_url)."\" , sublab_id='".$this->mysql->secure($this->sublab_id)."'

									WHERE rel_id=".$this->mysql->secure($this->rel_id).";")) { $flag_error = true; };
		}

		$this->mysql->endTransactions($flag_error);

		if($flag_error)
		{
			error_log("Error while inserting/updating the releases.");
			throw new Exception("Error while inserting/updating the releases.");
			return false;
		}
		else
		{
			return $this->rel_id;
		};
	}
	public static function delete($rel_id)
	{/** @function delete()
	 * Delete the releases.
	 *
	 * @param	rel_id	<int(11)>	the id of the releases to delete
	 *
	 * @return	<boolean>
	 **/
		global $mysql;

		$flag_error = false;

		$mysql->beginTransactions();

		if(!$mysql->query("DELETE FROM releases WHERE rel_id=".$mysql->secure($rel_id).";")) { $flag_error = true; };

		$mysql->endTransactions($flag_error);

		if($flag_error)
		{
			error_log("Error while deleting the releases. - DELETE FROM releases WHERE rel_id=".$mysql->secure($rel_id));
			throw new Exception("Error while deleting the releases.");
			return false;
		}
		else
		{
			return true;
		};
	}
	
	public static function getByUrl($rel_url)
	{
		global $mysql;
		$rels = array();
		$req_all = $mysql->query("	SELECT rel_id FROM releases WHERE rel_url='".$mysql->secure($rel_url)."' LIMIT 1");
		if($req_all->numRows() > 0)
		{
			$obj_all = $req_all->fetchRow();
			return $obj_all->rel_id;
		}
		return false;
	}

	public static function getAll($online=true)
	{
		global $mysql;
		$rels = array();
		if ($online === true)
		{
			$req_all = $mysql->query("SELECT rel_id FROM releases WHERE rel_show='1' ORDER BY rel_date DESC");
		} else
		{
			$req_all = $mysql->query("SELECT rel_id FROM releases ORDER BY rel_date DESC");
		}

		while($obj_all = $req_all->fetchRow())
		{
			$rels[] = $obj_all->rel_id;
		}
		return $rels;
	}

	private function getArtistes()
	{
		$arts = array();
		$req_art = $this->mysql->query("SELECT art_id FROM art_has_rel WHERE rel_id='".$this->rel_id."'");
		while($obj_art = $req_art->fetchRow())
		{
			$arts[] = $obj_art->art_id;
		}
		$this->art_ids = $arts;
		return $arts;
	}

	private function getPhotos()
	{
		$phos = array();
		$req_pho = $this->mysql->query("SELECT * FROM rel_has_pho WHERE rel_id='".$this->rel_id."' ");
		while($obj_pho = $req_pho->fetchRow())
		{
			$phos[] = $obj_pho->pho_id;
		}
		return $phos;
	}

	public function addPhoto($pho_id)
	{
		$this->removePhoto($pho_id);
		$rel_has_pho = new rel_has_pho();
		$rel_has_pho->rel_id = $this->rel_id;
		$rel_has_pho->pho_id = $pho_id;
		$rel_has_pho->relpho_order = rel_has_pho::getLastOrder($this->rel_id)+1;
		$rel_has_pho->save();
		return $rel_has_pho->relpho_id;
	}

	public function removePhoto($pho_id)
	{
		$relpho_id = rel_has_pho::exists(null, $this->rel_id, $pho_id);
		if ($relpho_id !== false)
		{
			rel_has_pho::delete($relpho_id);
		}
	}
	
	private function getTracklist()
	{
		$tracks = array();
		$req_tracklists = $this->mysql->query("SELECT * FROM tracklists WHERE rel_id='".$this->rel_id."' ORDER BY tra_order ASC");
		if($req_tracklists->numRows() > 0)
		{
			while($obj_tracklists = $req_tracklists->fetchRow())
			{
				$tracks[] = $obj_tracklists;
			}
		}
		return $tracks;
	}
}
?>