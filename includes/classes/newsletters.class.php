<?php
//======================================================================//
//== About newsletters.class.php
//==--------------------------------------------------------------------//
//== This file is generated by mysql.class.php of puppets library.
//== Copyright (c) 2009-2011 - MAQPRINT
//== Licensed under the GPL version 2.0 license.
//== See LICENSE file or
//== http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
//==--------------------------------------------------------------------//
//== Contributor : Erwan LE LOSTEC
//== Contributor : Patrick PERONNY
//======================================================================//
class newsletters
{/** @class newsletters
  * @brief newsletters table management.
  * Provides different methods for read and write in a newsletters table.
  **/
	public $new_id;
	public $new_mail;

	private $mysql;

	public function __construct($new_id = null)
	{/** @function newsletters()
	  * Create a new newsletters object.
	  * 
	  * @param	new_id		<int(11)>	the id of newsletters to load
	  * 
	  * @return	<boolean>
	  **/
		global $mysql;

		$this->mysql	= $mysql;

		$this->new_id	= $this->mysql->secure($new_id);
		$this->new_mail	= null;
		if($new_id != null)
		{
			$req_newsletters = $this->mysql->query("SELECT * FROM newsletters WHERE new_id='".$this->new_id."' LIMIT 1;");
			if($req_newsletters->numRows() > 0)
			{
				$obj_newsletters = $req_newsletters->fetchRow();
				$this->new_id	= $obj_newsletters->new_id;
				$this->new_mail	= $obj_newsletters->new_mail;
			}
			else
			{
				error_log("Error while loading newsletters, there no newsletters of id : $new_id.");
				throw new Exception("Error while loading newsletters, there no newsletters of id : $new_id.");
				return false; 
			};
		}
		return true;
	}
	public function save()
	{/** @function save()
	 * Insert or update a newsletters.
	 *
	 * @return	<mixed>		return false or the id of inserted/updated newsletters.
	 **/
		$flag_error = false;

		$this->mysql->beginTransactions();

		if(empty($this->new_id))
		{//-- Insert
			if(!$this->mysql->query("INSERT INTO newsletters (new_mail)
									VALUES ('".$this->mysql->secure($this->new_mail)."');")) { $flag_error = true; };
			$this->new_id = $this->mysql->lastInsertId();
		}
		else
		{//-- Update
			if(!$this->mysql->query("UPDATE newsletters SET new_mail='".$this->mysql->secure($this->new_mail)."'
									WHERE new_id=".$this->mysql->secure($this->new_id).";")) { $flag_error = true; };
		}

		$this->mysql->endTransactions($flag_error);

		if($flag_error)
		{
			error_log("Error while inserting/updating the newsletters.");
			throw new Exception("Error while inserting/updating the newsletters.");
			return false;
		}
		else
		{
			return $this->new_id;
		};
	}
	public static function delete($new_id)
	{/** @function delete()
	 * Delete the newsletters.
	 *
	 * @param	new_id	<int(11)>	the id of the newsletters to delete
	 *
	 * @return	<boolean>
	 **/
		global $mysql;

		$flag_error = false;

		$mysql->beginTransactions();

		if(!$mysql->query("DELETE FROM newsletters WHERE new_id=".$mysql->secure($new_id).";")) { $flag_error = true; };

		$mysql->endTransactions($flag_error);

		if($flag_error)
		{
			error_log("Error while deleting the newsletters. - DELETE FROM newsletters WHERE new_id=".$mysql->secure($new_id));
			throw new Exception("Error while deleting the newsletters.");
			return false;
		}
		else
		{
			return true;
		};
	}
}
?>