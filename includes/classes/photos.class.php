<?php
//======================================================================//
//== About photos.class.php
//==--------------------------------------------------------------------//
//== This file is generated by mysql.class.php of puppets library.
//== Copyright (c) 2009-2011 - MAQPRINT
//== Licensed under the GPL version 2.0 license.
//== See LICENSE file or
//== http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
//==--------------------------------------------------------------------//
//== Contributor : Erwan LE LOSTEC
//== Contributor : Patrick PERONNY
//======================================================================//
class photos
{/** @class photos
  * @brief photos table management.
  * Provides different methods for read and write in a photos table.
  **/
	public $pho_id;
	public $pho_name;
	public $pho_legend_fr;
	public $pho_legend_en;

	private $mysql;

	public function __construct($pho_id = null)
	{/** @function photos()
	  * Create a new photos object.
	  * 
	  * @param	pho_id		<int(11)>	the id of photos to load
	  * 
	  * @return	<boolean>
	  **/
		global $mysql;

		$this->mysql	= $mysql;

		$this->pho_id	= $this->mysql->secure($pho_id);
		$this->pho_name	= null;
		$this->pho_legend_fr	= null;
		$this->pho_legend_en	= null;
		if($pho_id != null)
		{
			$req_photos = $this->mysql->query("SELECT * FROM photos WHERE pho_id='".$this->pho_id."' LIMIT 1;");
			if($req_photos->numRows() > 0)
			{
				$obj_photos = $req_photos->fetchRow();
				$this->pho_id	= $obj_photos->pho_id;
				$this->pho_name	= $obj_photos->pho_name;
				$this->pho_legend_fr	= $obj_photos->pho_legend_fr;
				$this->pho_legend_en	= $obj_photos->pho_legend_en;
			}
			else
			{
				error_log("Error while loading photos, there no photos of id : $pho_id.");
				throw new Exception("Error while loading photos, there no photos of id : $pho_id.");
				return false; 
			};
		}
		return true;
	}
	public function save()
	{/** @function save()
	 * Insert or update a photos.
	 *
	 * @return	<mixed>		return false or the id of inserted/updated photos.
	 **/
		$flag_error = false;

		$this->mysql->beginTransactions();

		if(empty($this->pho_id))
		{//-- Insert
			if(!$this->mysql->query("INSERT INTO photos (pho_name, pho_legend_fr, pho_legend_en)
									VALUES ('".$this->mysql->secure($this->pho_name)."', '".$this->mysql->secure($this->pho_legend_fr)."', '".$this->mysql->secure($this->pho_legend_en)."');")) { $flag_error = true; };
			$this->pho_id = $this->mysql->lastInsertId();
		}
		else
		{//-- Update
			if(!$this->mysql->query("UPDATE photos SET pho_name='".$this->mysql->secure($this->pho_name)."', pho_legend_fr='".$this->mysql->secure($this->pho_legend_fr)."', pho_legend_en='".$this->mysql->secure($this->pho_legend_en)."'
									WHERE pho_id=".$this->mysql->secure($this->pho_id).";")) { $flag_error = true; };
		}

		$this->mysql->endTransactions($flag_error);

		if($flag_error)
		{
			error_log("Error while inserting/updating the photos.");
			throw new Exception("Error while inserting/updating the photos.");
			return false;
		}
		else
		{
			return $this->pho_id;
		};
	}
	public static function delete($pho_id)
	{/** @function delete()
	 * Delete the photos.
	 *
	 * @param	pho_id	<int(11)>	the id of the photos to delete
	 *
	 * @return	<boolean>
	 **/
		global $mysql;

		$flag_error = false;

		$mysql->beginTransactions();

		if(!$mysql->query("DELETE FROM photos WHERE pho_id=".$mysql->secure($pho_id).";")) { $flag_error = true; };

		$mysql->endTransactions($flag_error);

		if($flag_error)
		{
			error_log("Error while deleting the photos. - DELETE FROM photos WHERE pho_id=".$mysql->secure($pho_id));
			throw new Exception("Error while deleting the photos.");
			return false;
		}
		else
		{
			return true;
		};
	}

	public static function getAll($rel_id_exclu=null, $start=null, $long=null, $search=null)
	{
		global $mysql;
		$imgs = array();
		$filters = array();
		$query_add = '';
		if (!empty($search))
		{
			$filters[] = "(pho_name LIKE \"%".$mysql->secure($search)."%\" )";
		}
		if (!empty($rel_id_exclu))
		{
			$filters[] = "(pho_id NOT IN (SELECT pho_id FROM rel_has_pho WHERE rel_has_pho.rel_id='".$mysql->secure($rel_id_exclu)."' ))";
		}
		if (count($filters)>0)
		{
			$query_add = "WHERE ".implode(" AND ", $filters);
		}
		if ((empty($start)) && (empty($long)))
		{
			$req_pho = $mysql->query("SELECT pho_id, pho_name, pho_name FROM photos ".$query_add." ORDER BY pho_name ASC");
		} else
		{
			$req_pho = $mysql->query("SELECT pho_id, pho_name, pho_name FROM photos ".$query_add." ORDER BY pho_name ASC LIMIT ".$mysql->secure($start).",".$mysql->secure($long)."");
		}
		if ($req_pho->numRows() > 0)
		{
			while ($obj_pho = $req_pho->fetchRow())
			{
				$imgs[] = $obj_pho->pho_id;
			}
		}
		return $imgs;
	}

	public static function cleanName($file_name)
	{
		$file_name = text::normalize($file_name);
		$file_name = strtolower($file_name);
		$file_name = str_replace(" ", "_", $file_name);
		$file_name = str_replace("'", "-", $file_name);
		$file_name = str_replace('"', "-", $file_name);
		return $file_name;
	}

	public static function resizeMe($file_input=null, $file_output=null, $rep_depart=null, $ext_wanted='jpg')
	{
		global $INI;
		global $FORMATS_IMG;
		$flag = true;
		if(empty($file_output)) { $file_output = $file_input; }
		//$file_output = pathinfo($file_output, PATHINFO_FILENAME).".".$ext_wanted;

		if(empty($rep_depart))
		{
			$rep_depart = $INI['photos_folder']['real_size'];
		}
		if (is_file($rep_depart.$file_input))
		{
			foreach($FORMATS_IMG as $format)
			{
				if(!file_exists($INI["photos_folder"][$format])) { mkdir($INI["photos_folder"][$format]); }
				if (!is_file($INI["photos_folder"][$format].$file_output))
				{
					$extension = pathinfo($rep_depart.$file_input,PATHINFO_EXTENSION);
					$extension = strtolower($extension);

					switch($extension)
					{
						case 'jpg':
						case 'jpeg':
							$im = @imagecreatefromjpeg($rep_depart.$file_input);
						break;

						case 'gif':
							$im = @imagecreatefromgif($rep_depart.$file_input);
						break;

						case 'png':
							$im = @imagecreatefrompng($rep_depart.$file_input);
						break;
					}
					$tab_dimension	= explode('x', $format);
					$t_width	= $tab_dimension[0];
					$t_height	= $tab_dimension[1];

					$im_width	= imagesx($im);
					$im_height	= imagesy($im);
					$width_ratio	= $im_width/$t_width;
					$height_ratio	= $im_height/$t_height;
					if($width_ratio>$height_ratio) $ratio=$width_ratio; else $ratio=$height_ratio;
					$thumb_width	= intval($im_width/$ratio);
					$thumb_height	= intval($im_height/$ratio);
					$dst_x		= intval(($t_width-$thumb_width)/2);
					$dst_y		= intval(($t_height-$thumb_height)/2);

					$out_im		= imagecreatetruecolor($t_width, $t_height);
					$bgc		= imagecolorallocate($out_im, 255, 255, 255);
					imagefill ($out_im, 0, 0, $bgc);
					imagecopyresampled($out_im, $im, $dst_x, $dst_y, 0, 0, $thumb_width, $thumb_height, $im_width, $im_height);
					switch($extension)
					{
						case 'jpg':
						case 'jpeg':
							if (imagejpeg($out_im, $INI['photos_folder'][$format].$file_output))
							{
								$flag = true;
							} else
							{
								$flag = false;
							}
						break;

						case 'gif':
							if (imagegif($out_im, $INI['photos_folder'][$format].$file_output))
							{
								$flag = true;
							} else
							{
								$flag = false;
							}
						break;

						case 'png':
							if (imagepng($out_im, $INI['photos_folder'][$format].$file_output))
							{
								$flag = true;
							} else
							{
								$flag = false;
							}
						break;
					}
					imagedestroy($out_im);

					//exec($INI['exec']['convert']." -define jpeg:size=".$format." \"".$INI["photos_folder"]["originals"].$file_input."\"  -thumbnail ".$format." -gravity center -background white -extent ".$format."  '".$INI["photos_folder"][$format].$file_output."'");
				}
			}
		}
		else
		{
			$flag = false;
		}
		return $flag;
	}
}
?>